import com.google.gson.GsonBuilder
import com.google.gson.JsonElement
import com.google.gson.JsonObject
import com.google.gson.JsonParser
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

class GithubDependency {
    public final String githubAddress
    public final String curseforgeSlug
    public final String apiVersion
    public final String patchVersion
    public final String nextAPIVersion
    public final String modId
    public final String modNamespace

    GithubDependency(String data) {
        int seperator1 = data.indexOf('|'), seperator2 = data.indexOf(':'), seperator3 = data.indexOf(',')
        githubAddress = data.substring(0, seperator1)
        curseforgeSlug = data.substring(seperator1 + 1, seperator2)
        apiVersion = data.substring(seperator2 + 1, seperator3)
        patchVersion = data.substring(seperator3).replace(',', '.')
        String apiVersionMinusMC = apiVersion.substring(apiVersion.indexOf('-') + 1)
        nextAPIVersion =
                apiVersion.substring(0, apiVersion.indexOf('-')) + '-' + apiVersionMinusMC.split('\\.')[0] + '.' +
                        ((apiVersionMinusMC.split('\\.')[1] as int) + 1)
        modId = githubAddress.substring(githubAddress.lastIndexOf('/') + 1).toLowerCase()
        modNamespace = githubAddress.substring(0, githubAddress.indexOf('/')).replace('-', '_')
    }

    static List<GithubDependency> makeGithubDependencyList(String githubDependencies) {
        if (!githubDependencies.contains(';')) {
            return new ArrayList<GithubDependency>()
        }
        String[] dependenciesArray = githubDependencies.split(';')
        List<GithubDependency> dependencyList = new ArrayList<>()
        for (String dependencyStr : dependenciesArray) {
            dependencyList.add(new GithubDependency(dependencyStr))
        }
        return dependencyList
    }
}

List<GithubDependency> githubDependencyList = GithubDependency.makeGithubDependencyList(githubDependencies)
for (GithubDependency dependency : githubDependencyList) {
    println('Added GitHub dependency: ' + dependency.githubAddress + ", Version: " + dependency.apiVersion +
            dependency.patchVersion + ", Next API Version: " + dependency.nextAPIVersion)
}

String mcVersion = version.split('-')[0]
if (forgeVersion == "latest" || forgeVersion == "recommended") {
    println 'Grabbing ' + forgeVersion + ' forge version for MC ' + mcVersion
    forgeVersion = new JsonSlurper().
            parse(new URL('https://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json')).
            get('promos').get(mcVersion + '-' + forgeVersion)
    assert forgeVersion != null
}
String capitalizedModId = modDisplayName.replace(' ', '')
String modId = capitalizedModId.toLowerCase()
String forgeMajor = forgeVersion.split('\\.')[0]
if (minimumForgeVersion == 'none') {
    minimumForgeVersion = forgeMajor
}
String mcNextVersion = "1." + ((mcVersion.split('\\.')[1] as int) + 1)
String homepageURL = "https://www.curseforge.com/minecraft/mc-mods/${modDisplayName.replace(' ', '-').toLowerCase()}"
String issuesURL = "${homepageURL}/issues"
String updateURL = "https://raw.githubusercontent.com/mrp-v2/${capitalizedModId}/master/update.json"
archivesBaseName = modId
group = "${author}.${archivesBaseName}"
File secretFile = file '../secrets.json'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' +
        System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Minecraft: ' + mcVersion + ' Forge: ' + forgeVersion + ' Mapping: ' + mapping + ' Mod: ' + version)

sourceSets.main.resources {
    srcDirs += 'src/generated/resources'
}

minecraft {
    mappings channel: mapping.split('\\|')[0], version: mapping.split('\\|')[1]
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                mod {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                mod {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            String[] tempArgs = ['--mod', modId, '--all', '--output', file('src/generated/resources/'), '--existing',
                                 sourceSets.main.output.resourcesDir]
            for (GithubDependency dependency : githubDependencyList) {
                tempArgs += '--existing-mod'
                tempArgs += dependency.modId
            }
            args tempArgs
            mods {
                mod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    for (GithubDependency dependency : githubDependencyList) {
        maven {
            name = dependency.githubAddress
            url = new URL('https://maven.pkg.github.com/' + dependency.githubAddress)
            credentials {
                username = 'mrp-v2'
                if (secretFile.exists()) {
                    password = new JsonSlurper().parse(secretFile).get('github-packages-token')
                }
            }
        }
    }
    mavenLocal()
    maven {
        name = 'CurseMaven'
        url = new URL('https://www.cursemaven.com')
    }
}

task regenerateUpdateJson {
    doLast {
        String updateJsonLocation = './update.json'
        println 'Regenerating update.json from version: ' + version
        JsonObject newUpdateJson = new JsonObject()
        newUpdateJson.addProperty('homepage', homepageURL)
        JsonObject promos = new JsonObject()
        newUpdateJson.add('promos', promos)
        JsonObject oldUpdateJson = new JsonParser().
                parse(new File(updateJsonLocation).text).getAsJsonObject().
                getAsJsonObject('promos')
        String latestTargetMCVersion = mcVersion
        for (Map.Entry<String, JsonElement> entry : oldUpdateJson.entrySet()) {
            promos.addProperty(entry.key, entry.value.asString)
            if (entry.key.equals("latest")) {
                latestTargetMCVersion = entry.value.asString.substring(0, entry.value.asString.indexOf("-"))
            }
        }
        promos.addProperty("${mcVersion}-recommended", (String) version)
        promos.addProperty("${mcVersion}-latest", (String) version)
        if (mcVersion >= latestTargetMCVersion) {
            promos.addProperty("recommended", (String) version)
            promos.addProperty("latest", (String) version)
        }

        String jsonString = new GsonBuilder().setPrettyPrinting().create().toJson(newUpdateJson)
        new File(updateJsonLocation).text = jsonString
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
    for (GithubDependency dependency : githubDependencyList) {
        implementation fg.deobf(dependency.modNamespace + '.' + dependency.modId + ':' + dependency.modId + ':' +
                dependency.apiVersion + dependency.patchVersion)
    }
}

jar {
    manifest {
        Map<String, ?> map = new HashMap<>()
        map.putAll('Specification-Title': archivesBaseName,
                'Specification-Vendor': author,
                'Specification-Version': '1', // We are version 1 of ourselves
                'Implementation-Title': project.name,
                'Implementation-Version': "${version}",
                'Implementation-Vendor': author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
        attributes(map)
    }
}

jar.finalizedBy('reobfJar')

processResources {
    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
    inputs.property 'version', project.version
    inputs.property 'modId', modId
    inputs.property 'forgeMajor', forgeMajor
    inputs.property 'mcVersion', mcVersion
    inputs.property 'mcNextVersion', mcNextVersion
    inputs.property 'homepageURL', homepageURL
    inputs.property 'modDisplayName', modDisplayName
    inputs.property 'capitalizedModId', capitalizedModId
    inputs.property 'modDescription', modDescription
    inputs.property 'author', author
    inputs.property 'updateURL', updateURL
    inputs.property 'issuesURL', issuesURL
    String githubDependenciesData = ''
    for (GithubDependency dependency : githubDependencyList) {
        githubDependenciesData +=
                "[[dependencies.${modId}]]\n" + "    modId=\"${dependency.modId}\"\n" + '    mandatory=true\n' +
                        "    versionRange=\"[${dependency.apiVersion},${dependency.nextAPIVersion})\"\n" +
                        '    ordering="AFTER"\n' + '    side="BOTH"\n'
    }
    inputs.property 'githubDependencies', githubDependenciesData
    String[] files = new String[2]
    files[0] = 'META-INF/mods.toml'
    files[1] = 'pack.mcmeta'
    from(sourceSets.main.resources.srcDirs) {
        include files
        Map<String, ?> properties = new HashMap<>()
        properties.putAll('version': project.version, 'modId': modId, 'forgeMajor': forgeMajor,
                'minimumForgeVersion': minimumForgeVersion, 'mcVersion': mcVersion,
                'homepageURL': homepageURL, 'modDisplayName': modDisplayName, 'capitalizedModId': capitalizedModId,
                'modDescription': modDescription, 'author': author, 'updateURL': updateURL, 'issuesURL': issuesURL,
                'githubDependencies': githubDependenciesData)
        expand properties
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude files
    }
}
